name: Build Firmware
run-name: Build ESP32 Firmware images
env:
  REGISTRY: ghcr.io
  REPO_OWNER: ${{ github.repository_owner }}
  PACKAGE_NAME: esp32wol_builder
on: [push]
jobs:
  build-docker-builder:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Log in to the Container registry
        uses: docker/login-action@v3.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/${{ env.PACKAGE_NAME }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.2.0
      - name: Build and push Docker image
        uses: docker/build-push-action@v5.3.0
        with:
          context: ./builder
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          github-token: ${{ secrets.GITHUB_TOKEN }}
  build:
    needs: build-docker-builder
    runs-on: ubuntu-latest
    permissions:
      packages: read
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install requirements
        run: pip install -r requirements.txt
      - name: Prepare dist files
        run: python -c "import upload_mpy; upload_mpy.prepare()"
      - name: Bundle static files
        run: python -m freezefs src/static .dist/frozen_static.py
      - name: Login to docker registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build firmware
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/${{ env.PACKAGE_NAME }}
          docker run --rm -v "$(pwd)/.dist":/mnt/source -v "$(pwd)/built":/mnt/built ${{ env.REGISTRY }}/${{ env.REPO_OWNER }}/${{ env.PACKAGE_NAME }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Firmware
          path: ./built
          if-no-files-found: error
          retention-days: 10
